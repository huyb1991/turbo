{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 11, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/crates/turbopack-tests/js/jest-entry.ts"],"sourcesContent":["declare const __turbopack_external_require__: (id: string) => any;\nconst jest = __turbopack_external_require__(\"jest-circus\");\n\nconst uncaughtExceptions: string[] = [];\nconst unhandledRejections: string[] = [];\n\nprocess.on(\"uncaughtException\", (e) => {\n  uncaughtExceptions.push(String(e));\n});\n\nprocess.on(\"unhandledRejection\", (e) => {\n  unhandledRejections.push(String(e));\n});\n\nexport default async function run() {\n  const jestResult = await jest.run();\n\n  // Wait a full tick for unhandledRejection handlers to run -- a microtask is not sufficient.\n  await new Promise((resolve) => setTimeout(resolve, 0));\n\n  return {\n    jestResult,\n    uncaughtExceptions,\n    unhandledRejections,\n  };\n}\n"],"names":[],"mappings":";;;;;;AAGA,MAAM,qBAA+B,EAAE"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/crates/turbopack-tests/js/jest-entry.ts"],"sourcesContent":["declare const __turbopack_external_require__: (id: string) => any;\nconst jest = __turbopack_external_require__(\"jest-circus\");\n\nconst uncaughtExceptions: string[] = [];\nconst unhandledRejections: string[] = [];\n\nprocess.on(\"uncaughtException\", (e) => {\n  uncaughtExceptions.push(String(e));\n});\n\nprocess.on(\"unhandledRejection\", (e) => {\n  unhandledRejections.push(String(e));\n});\n\nexport default async function run() {\n  const jestResult = await jest.run();\n\n  // Wait a full tick for unhandledRejection handlers to run -- a microtask is not sufficient.\n  await new Promise((resolve) => setTimeout(resolve, 0));\n\n  return {\n    jestResult,\n    uncaughtExceptions,\n    unhandledRejections,\n  };\n}\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,sBAAgC,EAAE"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/crates/turbopack-tests/js/jest-entry.ts"],"sourcesContent":["declare const __turbopack_external_require__: (id: string) => any;\nconst jest = __turbopack_external_require__(\"jest-circus\");\n\nconst uncaughtExceptions: string[] = [];\nconst unhandledRejections: string[] = [];\n\nprocess.on(\"uncaughtException\", (e) => {\n  uncaughtExceptions.push(String(e));\n});\n\nprocess.on(\"unhandledRejection\", (e) => {\n  unhandledRejections.push(String(e));\n});\n\nexport default async function run() {\n  const jestResult = await jest.run();\n\n  // Wait a full tick for unhandledRejection handlers to run -- a microtask is not sufficient.\n  await new Promise((resolve) => setTimeout(resolve, 0));\n\n  return {\n    jestResult,\n    uncaughtExceptions,\n    unhandledRejections,\n  };\n}\n"],"names":[],"mappings":";;;;;;AACA,MAAM,OAAO,+BAA+B"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/crates/turbopack-tests/js/jest-entry.ts"],"sourcesContent":["declare const __turbopack_external_require__: (id: string) => any;\nconst jest = __turbopack_external_require__(\"jest-circus\");\n\nconst uncaughtExceptions: string[] = [];\nconst unhandledRejections: string[] = [];\n\nprocess.on(\"uncaughtException\", (e) => {\n  uncaughtExceptions.push(String(e));\n});\n\nprocess.on(\"unhandledRejection\", (e) => {\n  unhandledRejections.push(String(e));\n});\n\nexport default async function run() {\n  const jestResult = await jest.run();\n\n  // Wait a full tick for unhandledRejection handlers to run -- a microtask is not sufficient.\n  await new Promise((resolve) => setTimeout(resolve, 0));\n\n  return {\n    jestResult,\n    uncaughtExceptions,\n    unhandledRejections,\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAce,eAAe;IAC5B,MAAM,aAAa,MAAM,wKAAA,CAAA,OAAI,CAAC,GAAG;IAEjC,4FAA4F;IAC5F,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IAEnD,OAAO;QACL;QACA,oBAAA,wKAAA,CAAA,qBAAkB;QAClB,qBAAA,wKAAA,CAAA,sBAAmB;IACrB;AACF"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}